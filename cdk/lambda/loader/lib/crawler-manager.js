// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: MIT-0

const path = require('path');
const AWS = require('aws-sdk');
const glue = new AWS.Glue();
const { retry } = require(path.join(__dirname, "retry"));
const { Constants } = require(path.join(__dirname, "constants"));
const { CrawlerNotFoundError } = require(path.join(__dirname, "errors/crawler-not-found"));
const { CrawlerNotReadyError } = require(path.join(__dirname, "errors/crawler-not-ready"));

class CrawlerManager {
    item;
    crawler;

    constructor(item) {
        this.item = item;
        this.crawler = item.crawler;
    }

    async exists() {
        try {
            await this.checkExists();
            return true;
        } catch (e) {
            return false;
        }
    }

    async checkExists() {
        try {
            await glue.getCrawler({ Name: this.crawler }).promise();
        } catch (e) {
            throw new CrawlerNotFoundError(this.crawler);
        }
        console.log(`Crawler [${this.crawler}] is confirmed.`)
    }

    async checkExistsRetry() {
        await retry(this.checkExists, this);
    }

    async checkReadyStatus() {
        var data = await glue.getCrawler({ Name: this.crawler }).promise();
        if (data.Crawler.State == "READY") {
            console.log(`The crawler [${this.crawler}] is in READY state.`);
        } else {
            throw new CrawlerNotReadyError(this.crawler);
        }
    }

    async checkReadyStatusRetry() {
        await retry(this.checkReadyStatus, this, [], 20);
        console.log(`The crawler ${this.crawler} is in the READY state.`);
    }

    async start() {
        await glue.startCrawler({ Name: this.crawler }).promise();
        console.log(`The crawler ${this.crawler} is started.`);
    }

    async create() {
        console.log(`Create crawler [${this.crawler}].`);
        await glue.createCrawler({
            Name: this.crawler,
            Role: process.env.GLUE_ROLE,
            DatabaseName: this.item.schema,
            Description: "Auto-generated by the Loader.",
            RecrawlPolicy: { RecrawlBehavior: "CRAWL_EVERYTHING" },
            CrawlerSecurityConfiguration: process.env.GLUE_SECURITY_CONFIG,
            LineageConfiguration: { CrawlerLineageSettings: "ENABLE" },
            TablePrefix: `${Constants.PREFIX}_`,
            Tags: { Name: this.crawler },
            Targets: {
                S3Targets: [{
                    Path: `s3://${process.env.BUCKET_NAME}/${this.item.path}`,
                    ConnectionName: process.env.GLUE_S3_CONNECTION
                }]
            },
            Configuration: `{
                "Version": 1.0,
                "Grouping": {
                    "TableGroupingPolicy": "CombineCompatibleSchemas",
                    "TableLevelConfiguration": 4  
                }
            }`,
        }).promise();
    }

}

module.exports = { CrawlerManager }
